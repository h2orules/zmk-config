/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NUMP    3

#define MOT(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer


/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        td_cap: tap_dance_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   -   |
// | TAB/N |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// | CAPW  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | ALT | CTRL | LOWER| GUI  |  ENTER |  | SPACE | GUI  | RAISE| CTRL  | ALT   | 
            bindings = <
&kp ESC       &kp N1 &kp N2   &kp N3    &kp N4    &kp N5                          &kp N6   &kp N7     &kp N8    &kp N9   &kp N0   &kp MINUS
&lt NUMP TAB  &kp Q  &kp W    &kp E     &kp R     &kp T                           &kp Y    &kp U      &kp I     &kp O    &kp P    &bspc_del
&caps_word    &kp A  &kp S    &kp D     &kp F     &kp G                           &kp H    &kp J      &kp K     &kp L    &kp SEMI &kp SQT
&td_cap       &kp Z  &kp X    &kp C     &kp V     &kp B     &kp C_MUTE  &none     &kp N    &kp M      &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                     &kp LALT &kp LCTRL &mo LOWER &kp LGUI  &kp RET     &kp SPACE &kp RGUI &mo RAISE  &kp RCTRL &kp RALT  
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// | `     |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |   =   |
// |       |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp GRAVE &kp F1    &kp F2    &kp F3       &kp F4       &kp F5                           &kp F6          &kp F7           &kp F8        &kp F9            &kp F10   &kp EQUAL
&trans    &none     &none     &kp LC(LALT) &kp LS(LGUI) &none                            &kp PG_UP       &kp LG(LEFT)     &kp UP        &kp LG(RIGHT)     &kp LBKT  &kp RBKT
&trans    &kp LCTRL &kp LALT  &kp LSHFT    &kp LGUI     &kp LG(TAB)                      &kp PG_DN       &kp LEFT         &kp DOWN      &kp RIGHT         &kp LBRC  &kp RBRC
&trans    &kp LG(Z) &kp LG(X) &kp LG(C)    &kp LG(V)    &kp LG(LS(TAB))  &trans   &trans &kp LC(LA(RET)) &kp LC(LA(LEFT)) &kp LC(LA(C)) &kp LC(LA(RIGHT)) &kp BSLH  &trans
                    &trans    &trans       &trans       &trans           &trans   &trans &trans          &trans           &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                       &trans    &trans    &trans   &trans    &trans  &trans
&out OUT_TOG &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                             &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans
&trans       &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                           &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC
&trans       &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans  &bootloader   &bootloader  &trans    &trans    &trans   &trans    &trans  &trans
                          &trans       &trans       &trans       &trans  &trans        &trans       &trans    &trans    &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        
        nump_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&none  &none &none &none &none &none                &kp ESC      &kp KP_NUM &kp KP_DIVIDE &kp KP_MULTIPLY &kp KP_SUBTRACT &kp KP_LPAR
&none  &none &none &none &none &none                &kp CARET    &kp KP_N7  &kp KP_N8     &kp KP_N9       &kp KP_PLUS     &kp KP_RPAR
&none  &none &none &none &none &none                &kp PRCNT    &kp KP_N4  &kp KP_N5     &kp KP_N6       &kp KP_EQUAL    &kp BSPC
&none  &none &none &none &none &none &none   &none  &kp KP_COMMA &kp KP_N1  &kp KP_N2     &kp KP_N3       &kp KP_ENTER    &KP_ENTER
             &none &none &none &none &none   &trans &trans       &kp KP_N0  &kp KP_DOT    &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
